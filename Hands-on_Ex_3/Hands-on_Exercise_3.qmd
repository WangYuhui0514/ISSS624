---
title: "Hands-on Exercise 2:Processing and Visualising Flow Data"
author: "Wang Yuhui"
---

# 1 Overview

In this hands-on exercise, you will learn how to build an OD matrix by using *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall.

# 2 Getting Started

For the purpose of this exercise, four r packages will be used. They are:

-   sf for importing, integrating, processing and transforming geospatial data.

-   tidyverse for importing, integrating, wrangling and visualising data.

-   tmap for creating thematic maps.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
pacman::p_load(tmap, sf, DT, stplanr,
               performance,
               ggpubr, tidyverse)
```

# 3 **Preparing the Flow Data**

## **3.1 Importing the OD data**

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus <- read_csv("data/origin_destination_bus_202310.csv")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
glimpse(odbus)
```

A quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

## **3.2 Extracting the study data**

For the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o'clock.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Table below shows the content of odbus6_9

```{r}
datatable(odbus6_9)
```

Save the output in rds format for future used.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

Import the save odbus6_9.rds into R environment.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

# **4 Working with Geospatial Data**

For the purpose of this exercise, two geospatial data will be used. They are:

-   BusStop: This data provides the location of bus stop as at last quarter of 2022.

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019.

## **4.1 Importing geospatial data**

Two geospatial data will be used in this exercise, they are:

```{r}
#| code-fold: true
#| code-summary: "Show the code"
busstop <- st_read(dsn = "data/geospatial/",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
mpsz
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")
```

# **5 Geospatial data wrangling**

## **5.1 Combining Busstop and mpsz**

```{r}
#| code-fold: true
#| code-summary: "Show the code"
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
datatable(busstop_mpsz)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

Next, we are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
od_data <- left_join(odbus6_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Before continue, it is a good practice for us to check for duplicating records.

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
duplicate
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
od_data <- unique(od_data)
```

Next, we will update od_data data frame cwith the planning subzone codes.

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

od_data <- unique(od_data)

od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

Next, save the data.

```{r}
write_rds(od_data, "data/rds/od_data.rds")

od_data <- read_rds("data/rds/od_data.rds")
```

# **6 Visualising Spatial Interaction**

## **6.1 Removing intra-zonal flows**

We will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

## **6.2 Creating desire lines**

In this code chunk below, `od2line()` of **stplanr** package is used to create the desire lines.

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

## **6.3 Visualising the desire lines**

To visualise the resulting desire lines, the code chunk below is used.

```{r}
library(tmap)

tm_shape(mpsz) +
  tm_polygons() +
tm_shape(flowLine) +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3) +
tm_layout(legend.width = 0.5)  # 调整这个值以适合您的图例宽度需求

```

When the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%  
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
